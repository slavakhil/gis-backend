import { MikroORM } from "@mikro-orm/postgresql";
import mikroOrmConfig from "./configs/mikro-orm.config.js";
import { User } from "./entities/user.entity.js";
import bcrypt from "bcrypt";

const createAdminUser = async () => {
  try {
    const orm = await MikroORM.init(mikroOrmConfig);
    const em = orm.em.fork();

    const existing = await em.findOne(User, { email: "admin@example.com" });
    if (existing) {
      console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
      return;
    }

    const hashedPassword = await bcrypt.hash("admin123", 10);

    const user = em.create(User, {
      email: "admin@example.com",
      password: hashedPassword,
      isAdmin: true, // üëà –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
    });

    await em.persistAndFlush(user);
    console.log("‚úÖ –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω");
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);
  }
};

createAdminUser();
