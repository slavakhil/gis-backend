(function (React) {
    'use strict';

    function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

    var React__default = /*#__PURE__*/_interopDefault(React);

    const Dashboard = () => {
      React.useEffect(() => {
        window.location.href = '/admin/resources/Новости';
      });
      return null;
    };

    const UploadPhoto = ({
      onChange,
      property,
      record
    }) => {
      const photoPath = record.params[property.name];
      const handleChange = async event => {
        const file = event.target.files?.[0];
        if (!file) return;
        const allowedTypes = ['image/png', 'image/jpeg', 'image/jpg'];
        if (!allowedTypes.includes(file.type)) {
          alert('Разрешены только файлы PNG, JPG или JPEG');
          return;
        }
        const formData = new FormData();
        formData.append('file', file);
        const response = await fetch('/admin/upload', {
          method: 'POST',
          body: formData
        });
        const data = await response.json();
        if (data.filePath) {
          onChange(property.name, data.filePath);
        }
      };
      const handleRemove = () => {
        onChange(property.name, '');
      };
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column',
          gap: '1em',
          marginTop: '1em'
        }
      }, /*#__PURE__*/React__default.default.createElement("label", {
        style: {
          marginBottom: '8px',
          display: 'block',
          fontSize: '12px',
          lineHeight: '16px',
          fontFamily: 'Roboto, sans-serif'
        }
      }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement("label", {
        style: {
          display: 'block',
          padding: '16px',
          border: '2px dashed #ccc',
          borderRadius: '8px',
          marginBottom: '16px',
          background: 'white',
          textAlign: 'center',
          cursor: 'pointer'
        }
      }, "\u041D\u0430\u0436\u043C\u0438\u0442\u0435, \u0447\u0442\u043E\u0431\u044B \u0437\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0444\u043E\u0442\u043E (PNG, JPG, JPEG)", /*#__PURE__*/React__default.default.createElement("input", {
        id: 'file-upload',
        type: 'file',
        accept: '.png,.jpg,.jpeg',
        onChange: handleChange,
        style: {
          display: 'none'
        }
      })), photoPath && (/*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          gap: '1em',
          alignItems: 'center'
        }
      }, /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          position: 'relative',
          width: '140px',
          height: '140px',
          border: '2px solid #0078C1',
          borderRadius: '10px',
          overflow: 'hidden',
          boxShadow: '0 4px 8px rgba(0,0,0,0.15)'
        }
      }, /*#__PURE__*/React__default.default.createElement("img", {
        src: photoPath,
        alt: 'uploaded',
        style: {
          width: '100%',
          height: '100%',
          objectFit: 'cover'
        }
      }), /*#__PURE__*/React__default.default.createElement("button", {
        onClick: handleRemove,
        type: 'button',
        style: {
          position: 'absolute',
          top: '6px',
          right: '6px',
          background: '#ff4d4f',
          color: 'white',
          border: 'none',
          borderRadius: '50%',
          width: '24px',
          height: '24px',
          cursor: 'pointer',
          fontWeight: 'bold'
        },
        title: '\u0423\u0434\u0430\u043B\u0438\u0442\u044C \u0444\u043E\u0442\u043E'
      }, "\u00D7")))));
    };

    const ImagePreview = ({
      record,
      property
    }) => {
      const filePath = record.params[property.path];
      if (!filePath) {
        return /*#__PURE__*/React__default.default.createElement("span", null, "\u041D\u0435\u0442 \u0438\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F");
      }
      return /*#__PURE__*/React__default.default.createElement("img", {
        src: filePath,
        alt: 'asdfasdf',
        style: {
          width: '150px',
          height: '150px',
          objectFit: 'cover',
          borderRadius: 8
        }
      });
    };

    const UploadMultiplePhotos = props => {
      const {
        onChange,
        property,
        record
      } = props;
      const existingPhotos = [];
      Object.entries(record.params).forEach(([key, value]) => {
        if (key.startsWith(`${property.name}.`) && typeof value === 'string') {
          existingPhotos.push(value);
        }
      });
      const [photos, setPhotos] = React.useState(existingPhotos);
      const handleChange = async event => {
        const files = Array.from(event.target.files || []);
        const totalPhotos = photos.length + files.length;
        if (totalPhotos > 3) {
          alert('Можно загрузить максимум 3 фотографии.');
          return;
        }
        const newPhotoPaths = [];
        for (const file of files) {
          const isValid = ['image/png', 'image/jpeg', 'image/jpg'].includes(file.type);
          if (!isValid) {
            alert('Можно загружать только изображения: png, jpg, jpeg');
            continue;
          }
          const formData = new FormData();
          formData.append('file', file);
          const response = await fetch('/admin/upload', {
            method: 'POST',
            body: formData
          });
          const data = await response.json();
          if (data.filePath) {
            newPhotoPaths.push(data.filePath);
          }
        }
        const updatedPhotos = [...photos, ...newPhotoPaths].slice(0, 3);
        setPhotos(updatedPhotos);
        updatedPhotos.forEach((path, index) => {
          onChange(`${property.name}.${index}`, path);
        });
        for (let i = updatedPhotos.length; i < 10; i++) {
          onChange(`${property.name}.${i}`, null);
        }
      };
      const handleRemove = indexToRemove => {
        const updated = photos.filter((_, index) => index !== indexToRemove);
        setPhotos(updated);
        updated.forEach((path, index) => {
          onChange(`${property.name}.${index}`, path);
        });
        for (let i = updated.length; i < 10; i++) {
          onChange(`${property.name}.${i}`, null);
        }
      };
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          flexDirection: 'column',
          gap: '1em',
          marginTop: '1em'
        }
      }, /*#__PURE__*/React__default.default.createElement("label", {
        style: {
          marginBottom: '8px',
          display: 'block',
          fontSize: '12px',
          lineHeight: '16px',
          fontFamily: 'Roboto, sans-serif'
        }
      }, "\u0418\u0437\u043E\u0431\u0440\u0430\u0436\u0435\u043D\u0438\u044F"), /*#__PURE__*/React__default.default.createElement("label", {
        style: {
          display: 'block',
          padding: '16px',
          border: '2px dashed #ccc',
          borderRadius: '8px',
          marginBottom: '16px',
          background: 'white',
          textAlign: 'center',
          cursor: 'pointer'
        }
      }, "\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u044C \u0444\u043E\u0442\u043E\u0433\u0440\u0430\u0444\u0438\u0438 (\u043C\u0430\u043A\u0441. 3)", /*#__PURE__*/React__default.default.createElement("input", {
        type: 'file',
        accept: 'image/png,image/jpeg,image/jpg',
        multiple: true,
        onChange: handleChange,
        style: {
          display: 'none'
        }
      })), /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          gap: '12px',
          flexWrap: 'wrap'
        }
      }, photos.map((photo, index) => (/*#__PURE__*/React__default.default.createElement("div", {
        key: index,
        style: {
          position: 'relative'
        }
      }, /*#__PURE__*/React__default.default.createElement("img", {
        src: photo,
        alt: `Фото ${index + 1}`,
        style: {
          width: '120px',
          height: '120px',
          objectFit: 'cover',
          borderRadius: '8px'
        }
      }), /*#__PURE__*/React__default.default.createElement("button", {
        type: 'button',
        onClick: () => handleRemove(index),
        style: {
          position: 'absolute',
          top: '-6px',
          right: '-6px',
          background: 'red',
          color: 'white',
          border: 'none',
          borderRadius: '50%',
          width: '20px',
          height: '20px',
          cursor: 'pointer'
        }
      }, "\u00D7"))))));
    };

    const ImagesPreview = props => {
      const {
        record,
        property
      } = props;
      const photos = [];
      Object.entries(record.params).forEach(([key, value]) => {
        if (key.startsWith(`${property.name}.`) && typeof value === 'string') {
          photos.push(value);
        }
      });
      return /*#__PURE__*/React__default.default.createElement("div", {
        style: {
          display: 'flex',
          gap: '5px',
          flexWrap: 'wrap'
        }
      }, photos.map((src, index) => (/*#__PURE__*/React__default.default.createElement("img", {
        key: index,
        src: src,
        alt: `photo-${index}`,
        style: {
          width: 120,
          height: 120,
          objectFit: 'cover',
          border: '1px solid #ccc'
        }
      }))));
    };

    AdminJS.UserComponents = {};
    AdminJS.UserComponents.DashboardRoute = Dashboard;
    AdminJS.UserComponents.UploadPhoto = UploadPhoto;
    AdminJS.UserComponents.ImagePreview = ImagePreview;
    AdminJS.UserComponents.UploadMultiplePhotos = UploadMultiplePhotos;
    AdminJS.UserComponents.ImagesPreview = ImagesPreview;

})(React);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
